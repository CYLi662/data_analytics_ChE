# Exercise: Compare the number of mis-classified points for the moons dataset with the perceptron "max cost" loss function and the "margin cost" loss function.

Hint: Remeber to convert y to [-1, 1], and to pass the correct datasets as arguments to the optimizer!
X = X_moons
y = y_moons*2 - 1

result = minimize(margin_cost, w, args=(X,y))
w_margin_moons = result.x

result = minimize(max_cost, w_margin_moons, args=(X,y))
w_max_moons = result.x

prediction = linear_classifier(X,w_max_moons)
fig, axes = plt.subplots(1,2,figsize=(15,6))
axes[0].scatter(X[:,0],X[:,1],c=y)
axes[1].scatter(X[:,0],X[:,1],c=prediction)

m2 = -w_margin_moons[1]/w_margin_moons[2]
b2 = -w_margin_moons[0]/w_margin_moons[2]
axes[1].plot(X[:,0], m2*X[:,0]+b2, ls='-', color='r')

m1 = -w_max_moons[1]/w_max_moons[2]
b1 = -w_max_moons[0]/w_max_moons[2]
axes[1].plot(X[:,0], m1*X[:,0]+b1, ls='-', color='b')


